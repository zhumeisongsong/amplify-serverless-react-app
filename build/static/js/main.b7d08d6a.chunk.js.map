{"version":3,"sources":["aws-exports.js","redux/Room/reducer.ts","redux/Comment/actionTypes.ts","redux/Comment/reducer.ts","utils/handleActions.ts","redux/User/reducer.ts","redux/reducers.ts","redux/Room/actionTypes.ts","redux/Room/saga.ts","graphql/mutations.ts","graphql/queries.ts","constants/index.ts","utils/isNgWord.ts","redux/Comment/saga.ts","redux/rootSaga.ts","redux/store.ts","redux/Room/actions.ts","redux/Comment/actions.ts","components/CommentCount/index.tsx","components/CommentList/style.ts","components/CommentList/index.tsx","components/CommentSubmit/style.ts","components/CommentSubmit/index.tsx","components/Introduction/index.tsx","components/Top/style.ts","components/Top/index.tsx","containers/Top/index.tsx","containers/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["awsmobile","initialState","id","JSON","parse","sessionStorage","getItem","roomId","commentTotalCount","handleActions","actions","state","raHandleActions","Object","keys","reduce","acc","key","produce","actionTypes","payload","listData","nextToken","cacheData","toNew","hasNew","info","userId","userName","userImage","isOfficialAccount","room","comment","user","createSaga","getSaga","rootSaga","takeEvery","_","call","API","graphqlOperation","input","data","createRoom","put","type","console","log","errors","message","select","getRoom","commentActionTypes","all","fork","NG_WORDS","content","some","item","RegExp","test","listSaga","updateRenderListSaga","updateCacheListSaga","roomID","isNgWord","res","createComment","limit","sortDirection","filter","or","eq","getCommentsByRoom","items","debounce","length","slice","roomSaga","commentSaga","windowIfDefined","window","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","middlewares","store","createStore","combineReducers","reducers","applyMiddleware","run","getRoomAction","createAction","listCommentsAction","createCommentAction","toggleHasNewAction","toggleLoadNewAction","updateCommentsAction","updateCacheCommentsAction","src","alt","CommentCount","styled","div","CommentList","listComments","comments","toggleLoadNew","toggleHasNew","useEffect","list","document","getElementById","scrollTop","scrollHeight","onScroll","offsetHeight","map","className","style","backgroundImage","onClick","setTimeout","CommentForm","Form","useForm","form","name","initialValues","onFinish","values","resetFields","Item","rules","required","max","placeholder","htmlType","Introduction","PageContainer","TabContainer","Tabs","TabTitle","TabList","TabTitleItem","Tab","TabContent","TabPanel","CommentSubmit","dispatch","useDispatch","useSelector","cacheComments","useCallback","updateComments","updateCacheComments","setInterval","notDuplicate","Top","Amplify","configure","awsconfig","Boolean","location","hostname","match","ReactDOM","render","App","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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,uCACA,2BACA,2BACA,2BACA,2BACA,eACA,uCACA,iCACA,qBACA,2BACA,2BACA,2BACA,iCACA,2BACA,2BACA,2BACA,iCACA,iCACA,2BACA,2BACA,2BACA,2BACA,qBACA,qBACA,qBACA,iCACA,2BACA,2BACA,2BACA,2BACA,2BACA,iCACA,iCACA,2BACA,2BACA,qBACA,qBACA,2BACA,uCACA,2BACA,6CACA,qBACA,2BACA,qBACA,qBACA,qBACA,qBACA,2BACA,qBACA,qBACA,qBACA,qBACA,2BACA,iCACA,qBACA,2BACA,qBACA,qBACA,2BACA,2BACA,uCACA,iCACA,qBACA,qBACA,2BACA,2BACA,qBACA,iCACA,2BACA,2BACA,iCACA,qBACA,qBACA,2BACA,qBACA,2BACA,iCACA,2BACA,qBACA,qBACA,2BACA,qBACA,qBACA,qBACA,qBACA,2BACA,2BACA,qBACA,qBACA,qBACA,2BACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,qBACA,eACA,2BACA,qBACA,eACA,eACA,2BACA,qBACA,SACA,eACA,eACA,iCACA,eACA,eACA,eACA,eACA,eACA,eACA,qBACA,eACA,2BACA,qBACA,eACA,eACA,qBACA,eACA,SACA,eACA,eACA,eACA,qBACA,2BACA,eACA,2BACA,qBACA,SACA,eACA,qBACA,eACA,qBACA,eACA,eACA,eACA,eACA,eACA,2BACA,eACA,2BACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,2BACA,eACA,qBACA,eACA,eACA,eACA,eACA,eACA,eACA,2BACA,eACA,eACA,eACA,2BACA,eACA,eACA,eACA,2BACA,eACA,qBACA,eACA,eACA,yDACA,eACA,eACA,qBACA,eACA,qBACA,eACA,qBACA,eACA,eACA,eACA,SACA,2BACA,eACA,eACA,qBACA,eACA,eACA,eACA,eACA,qBACA,2BACA,qBACA,eACA,eACA,SACA,gBAGa,WAACC,GAOd,OAAOD,EAASE,MANC,SAACC,GAGhB,OAFY,IAAIC,OAAOD,EAAM,KAElBE,KAAKJ,O,WCtOVvB,I,WA0CA4B,I,WA8CAC,I,WAaAC,I,YAae5B,IAlHzB,SAAUF,KAAV,iEACE,OADF,SACQG,YAAUlB,EAAD,UAAqB,SAAUmB,EAAV,4FAOX,OANvBlB,EADkC,EAClCA,QAKQqC,EAAYrC,EAAZqC,QAN0B,SAOLN,aAAO,SAACxC,GAAD,OAAWA,EAAMoB,KAAK7B,MAPxB,OAQyB,OADrD+D,EAP4B,gBAQ+Bd,aAC/D,SAACxC,GAAD,OAAWA,EAAMsB,QATe,OAsBpB,OAtBoB,SAQ1BL,EAR0B,EAQ1BA,SAAUD,EARgB,EAQhBA,OAAQE,EARQ,EAQRA,UAAWC,EARH,EAQGA,kBAG/Ba,EAA2B,CAC/Bc,UACA7B,WACAD,SACAE,YACAC,oBACAmC,SACAC,SAAUA,EAAST,IAlBa,oBAsBdlB,YAChB,CAACC,IAAK,WACNC,YJ6BkB,ofI7Bc,CAAEC,MAAOC,KAxBX,aAsB1BwB,EAtB0B,QA2BxBxB,KAAKyB,cA3BmB,iBA4B9B,OA5B8B,UA4BxBvB,YAAI,CACRC,KAAM3B,EACNC,QAAS,CACPC,SAAU,CAAC8C,EAAIxB,KAAKyB,kBA/BM,2DAoChCrB,QAAQC,IAAI,KAAMC,OAAO,GAAGC,SApCI,qCAAUZ,EAAV,oBADtC,uCA0CA,SAAUwB,KAAV,iEACE,OADF,SACQzB,YAAUlB,EAAD,UAAmB,SAAUmB,IAAV,+EACT,OADS,SACHa,aAAO,SAACxC,GAAD,OAAWA,EAAMoB,KAAK7B,MAD1B,OAEb,OADb+D,EAD0B,gBAEPd,aAAO,SAACxC,GAAD,OAAWA,EAAMsB,QAFjB,OAKb,OALa,SAExBN,EAFwB,EAExBA,OAFwB,mBAKPY,YACrB,CAACC,IAAK,WACNC,YHmBsB,2vBGnBc,CAClC4B,MFpFmB,GEqFnBJ,SACAK,cAAe,OACfC,OAAQ,CACNC,GAAI,CACF,CACEN,SAAU,CACRO,IAAI,IAGR,CACEP,SAAU,CACRO,IAAI,GAEN9C,OAAQ,CACN8C,GAAI9C,SAvBc,QAgC9B,OA3BMwC,EALwB,OA8BxBxB,EAAOwB,EAAIxB,KAAK+B,kBAAkBC,MA9BV,UAgCxB9B,YAAI,CACRC,KAAM3B,EACNC,QAAS,CACPG,UAAWoB,KAnCe,0DAuC9BI,QAAQC,IAAR,MACAD,QAAQC,IAAI,KAAMC,OAAO,GAAGC,SAxCE,qCAAUZ,EAAV,mBADpC,uCA8CA,SAAUyB,KAAV,iEACE,OADF,SACQa,YAAS,IAAKzD,EAAN,UAAiC,SAAUmB,IAAV,2EACb,OADa,SACPa,aAAO,SAACxC,GAAD,OAAWA,EAAMqB,WADjB,OAG7C,OAH6C,SACrCX,EADqC,EACrCA,SAAUE,EAD2B,EAC3BA,UAD2B,SAGvCsB,YAAI,CACRC,KAAM3B,EACNC,QAAS,CACPC,SAAS,GAAD,mBAAMA,GAAN,CAAgBE,EAAUA,EAAUsD,OAAS,QANZ,oCAAUvC,OAD3D,uCAaA,SAAU0B,KAAV,iEACE,OADF,SACQY,YAAS,IAAKzD,EAAN,UAAgC,SAAUmB,IAAV,yEACtB,OADsB,SAChBa,aAAO,SAACxC,GAAD,OAAWA,EAAMqB,WADR,OAG5C,OAH4C,SACpCT,EADoC,EACpCA,UADoC,SAGtCsB,YAAI,CACRC,KAAM3B,EACNC,QAAS,CACPG,UAAWA,EAAUuD,MAAM,EAAGvD,EAAUsD,OAAS,MANT,oCAAUvC,OAD1D,uCAae,SAAUF,KAAV,iEACb,OADa,SACPkB,YAAI,CACRC,YAAKrB,IACLqB,YAAKO,IACLP,YAAKQ,IACLR,YAAKS,MALM,wC,gBChJU5B,IAAV,SAAUA,KAAV,iEACb,OADa,SACPkB,YAAI,CACRyB,IACAC,OAHW,wCCSf,IAAMC,GAAoC,qBAAXC,OAAyB,KAAOA,OACzDC,GACHF,IAAmBA,GAAgBG,sCACpCC,IAEIC,GAAiBC,cACjBC,GAAmB,CAACF,IAM1B,IAAMG,GAAQC,YACZC,YAAgB,eACXC,IAELT,GAAiBU,IAAe,WAAf,EAAmBL,MAGtCF,GAAeQ,IAAI1D,IAEnB8C,OAAOO,MAAQA,G,cC7BFM,IAFmBC,aAAa7E,GAEhB6E,aAAa7E,ICF7B8E,GAAqBD,aAAa7E,GAElC+E,GAAsBF,aAAa7E,GAInCgF,IAF6BH,aAAa7E,GAErB6E,aAAa7E,IAElCiF,GAAsBJ,aAAa7E,GAEnCkF,GAAuBL,aAAa7E,GAEpCmF,GAA4BN,aAAa7E,G,wcCXvC,mBAAsC,IAAnCX,EAAkC,EAAlCA,kBAChB,OACE,kBAAC,GAAD,KACE,yBAAK+F,IAAI,GAAGC,IAAI,YADlB,wCAEUhG,IAKRiG,GAAeC,KAAOC,IAAV,M,u9CCXX,IAAMC,GAAcF,KAAOC,IAAV,M,UCIT,eAOC,EANdE,aAMe,IALfC,EAKc,EALdA,SACAtF,EAIc,EAJdA,MACAC,EAGc,EAHdA,OACAsF,EAEc,EAFdA,cACAC,EACc,EADdA,aAEAC,qBAAU,WACR,IAAMC,EAAOC,SAASC,eAAe,eAEjCF,GAAQ1F,GAASwF,IACnBE,EAAKG,UAAYH,EAAKI,aACtBN,GAAa,MAEd,CAACF,EAAUtF,IA6Bd,OACE,kBAACoF,GAAD,KACE,wBAAIW,SA7Ba,WACnB,IAAML,EAAOC,SAASC,eAAe,eAEjCF,GAAQH,IACNG,EAAKG,UAAYH,EAAKI,aAAeJ,EAAKM,aACxChG,GACFuF,GAAc,GAGhBA,GAAc,KAoBY7G,GAAG,eAC5B4G,GACCA,EAASW,KAAI,SAAC9D,GACZ,OAAIA,EAAKzD,GAEL,wBAAIe,IAAK0C,EAAKzD,IACZ,yBACEwH,UAAS,gBAAW/D,EAAK9B,UAAY,GAAK,cAC1C8F,MAAO,CACLC,gBAAgB,QAAD,OAAUjE,EAAK9B,UAAf,SAGnB,yBAAK6F,UAAU,QACb,yBAAKA,UAAU,aACZ/D,EAAK/B,SAAU,IACf+B,EAAK7B,mBACJ,yBAAKyE,IAAI,GAAGC,IAAI,qBAGpB,yBAAKkB,UAAU,WAAW/D,EAAKF,WAK9B,SAIf,kBAAC,KAAD,CACEiE,UAAS,iBAAYjG,IAAWD,EAAQ,GAAK,UAC7CqG,QA7CoB,WACxB,IAAMX,EAAOC,SAASC,eAAe,eAEjCF,GAAQH,GAAiBC,IAC3BD,GAAc,GACdC,GAAa,GAEbc,YAAW,WACTZ,EAAKG,UAAYH,EAAKI,eACrB,QAkCH,gD,0xCC9EC,IAAMS,GAAcrB,KAAOC,IAAV,MCGT,eAAiD,IAA9CvC,EAA6C,EAA7CA,cAAe2C,EAA8B,EAA9BA,cAA8B,EAC9CiB,KAAKC,UAAbC,EADsD,qBAe7D,OACE,kBAACH,GAAD,KACE,kBAAC,KAAD,CACEI,KAAK,OACLD,KAAMA,EACNE,cAAe,CACb3E,QAAS,IAEX4E,SApBW,SAACC,GACZlE,IACFA,EAAckE,GAEdJ,EAAKK,cAEDxB,GACFA,GAAc,MAed,kBAAC,KAAKyB,KAAN,CAAWL,KAAK,UAAUM,MAAO,CAAC,CAAEC,UAAU,GAAQ,CAAEC,IAAK,OAC3D,kBAAC,KAAD,CAAOC,YAAY,8EAGrB,kBAAC,KAAD,CAAQC,SAAS,UAAjB,mB,ubC/BO,kBACb,OACE,kBAAC,GAAD,KACE,yBAAKnB,UAAU,QAAf,+DAEE,6BAFF,4UAWAoB,GAAepC,KAAOC,IAAV,M,2/FCdX,IAAMoC,GAAgBrC,KAAOC,IAAV,MAoGbqC,GAAetC,aAAOuC,KAAPvC,CAAH,MAMZwC,GAAWxC,aAAOyC,KAAPzC,CAAH,MAkBR0C,GAAe1C,aAAO2C,KAAP3C,CAAH,MA6BZ4C,GAAa5C,aAAO6C,KAAP7C,CAAH,MC9IR,eASE,IARfI,EAQc,EARdA,SACAtF,EAOc,EAPdA,MACAC,EAMc,EANdA,OACAoF,EAKc,EALdA,aACAzC,EAIc,EAJdA,cACA5D,EAGc,EAHdA,kBACAuG,EAEc,EAFdA,cACAC,EACc,EADdA,aAEA,OACE,kBAAC+B,GAAD,KACE,4BAAQrB,UAAU,cAClB,yBAAKA,UAAU,QACb,6BAASA,UAAU,6CACjB,yBAAKA,UAAU,mBAAf,iCACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,UAEf,yBAAKA,UAAU,WACb,kBAACsB,GAAD,KACE,kBAACE,GAAD,CAAUxB,UAAU,aAClB,kBAAC0B,GAAD,iCAAoB5I,EAApB,KACA,kBAAC4I,GAAD,sBAGF,kBAACE,GAAD,KACE,kBAAC7C,GAAD,CAAcjG,kBAAmBA,IACjC,kBAAC,GAAD,CACEsG,SAAUA,EACVtF,MAAOA,EACPC,OAAQA,EACRoF,aAAcA,EACdE,cAAeA,EACfC,aAAcA,IAEhB,kBAACwC,GAAD,CACEpF,cAAeA,EACf2C,cAAeA,KAGnB,kBAACuC,GAAD,CAAY5B,UAAU,aACpB,kBAACoB,GAAD,WAMV,6BAASpB,UAAU,+BACjB,yBAAKA,UAAU,SAAf,gBACA,yBAAKA,UAAU,WACb,kBAACoB,GAAD,WCnCG,cACb,IAAMW,EAAWC,cACXlJ,EAAoBmJ,aACxB,SAAClE,GAAD,OAAkBA,EAAM1D,KAAKvB,qBAEzBsG,EAAW6C,aAAY,SAAClE,GAAD,OAAkBA,EAAMzD,QAAQX,YACvDuI,EAAgBD,aAAY,SAAClE,GAAD,OAAkBA,EAAMzD,QAAQT,aAC5DC,EAAQmI,aAAY,SAAClE,GAAD,OAAkBA,EAAMzD,QAAQR,SACpDC,EAASkI,aAAY,SAAClE,GAAD,OAAkBA,EAAMzD,QAAQP,UACrD2B,EAAUyG,uBAAY,kBAAMJ,EAAS1D,QAAkB,CAAC0D,IACxD5C,EAAegD,uBAAY,kBAAMJ,EAASxD,QAAuB,CACrEwD,IAEIrF,EAAgByF,uBACpB,SAACvB,GAAD,OAAYmB,EAASvD,GAAoBoC,MACzC,CAACmB,IAEG1C,EAAgB8C,uBACpB,SAACrI,GAAD,OAAWiI,EAASrD,GAAoB5E,MACxC,CAACiI,IAEGzC,EAAe6C,uBACnB,SAACpI,GAAD,OAAYgI,EAAStD,GAAmB1E,MACxC,CAACgI,IAEGK,EAAiBD,uBAAY,kBAAMJ,EAASpD,QAAyB,CACzEoD,IAEIM,EAAsBF,uBAC1B,kBAAMJ,EAASnD,QACf,CAACmD,IA8CH,OA3CAxC,qBAAU,WACR7D,IAEA4G,aAAY,WACVnD,MfnEyC,OegF1C,CAACzD,EAASyD,IAEbI,qBAAU,WACR,GAAIH,GAAY8C,GAAiBA,EAAc/E,OAAS,EAAG,CACzD,IAAIoF,GAAe,EAEnBnD,EAASW,KAAI,SAAC9D,GAKZ,OAJIA,EAAKzD,KAAO0J,EAAcA,EAAc/E,OAAS,GAAG3E,KACtD+J,GAAe,GAGVA,KAGLA,GAAgBzI,GAClBsI,IAGFC,IAEIE,IAAiBzI,GACnBwF,EAAaiD,MAGhB,CAACL,IAGF,kBAACM,GAAD,CACEpD,SAAUA,EACVtF,MAAOA,EACPC,OAAQA,EACRjB,kBAAmBA,EACnBoJ,cAAeA,EACf/C,aAAcA,EACdzC,cAAeA,EACf2C,cAAeA,EACfC,aAAcA,KC7GpBmD,UAAQC,UAAUC,GAEH,kBACb,OACE,kBAAC,IAAD,CAAU5E,MAAOA,IACf,kBAAC,GAAD,QCAc6E,QACW,cAA7BpF,OAAOqF,SAASC,UAEe,UAA7BtF,OAAOqF,SAASC,UAEhBtF,OAAOqF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAACC,GAAD,MAGAzD,SAASC,eAAe,SDgIpB,kBAAmByD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrI,QAAQqI,MAAMA,EAAMlI,c","file":"static/js/main.b7d08d6a.chunk.js","sourcesContent":["/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"ap-northeast-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://6lhttei7fzgdtfdytsurkmmpai.appsync-api.ap-northeast-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"ap-northeast-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-eunjlkc3s5ej3nojlvmulmbsga\"\n};\n\n\nexport default awsmobile;\n","import { handleActions } from 'redux-actions';\n\nconst info = JSON.parse(sessionStorage.getItem('info') || '');\n\nexport interface RoomState {\n  id: string,\n  commentTotalCount: number\n}\n\nconst initialState = {\n  id: info.roomId || '',\n  commentTotalCount: 0\n};\n\nexport default handleActions(\n  {\n  },\n  initialState\n);\n","export default {\n  CREATE: 'CREATE_comment',\n  CREATE_SUCCESS: 'CREATE_SUCCESS_comment',\n  UPDATE: 'UPDATE_comment',\n  UPDATE_SUCCESS: 'UPDATE_SUCCESS_comment',\n  DELETE: 'DELETE_comment',\n  DELETE_SUCCESS: 'DELETE_SUCCESS_comment',\n  GET: 'GET_comment',\n  GET_SUCCESS: 'GET_SUCCESS_comment',\n  LIST: 'LIST_comment',\n  LIST_SUCCESS: 'LIST_SUCCESS_comment',\n  TOGGLE_LOAD_NEW: 'TOGGLE_LOAD_NEW',\n  TOGGLE_HAS_NEW: 'TOGGLE_HAS_NEW',\n  SET_CACHE_SUCCESS: 'SET_CACHE_SUCCESS_comment',\n  UPDATE_RENDER: 'UPDATE_RENDER_comment',\n  UPDATE_CACHE: 'UPDATE_CACHE_comment',\n};\n","import handleActions from '../../utils/handleActions';\nimport actionTypes from './actionTypes';\nimport { CreateCommentInput } from '../../API';\n\nexport interface CommentState {\n  listData?: CreateCommentInput[];\n  cacheData?: any[];\n  toNew?: boolean;\n  hasNew?: boolean;\n  nextToken?: string;\n}\n\nconst initialState: CommentState = {\n  listData: [],\n  cacheData: [],\n  toNew: true,\n  hasNew: false\n};\n\nexport default handleActions(\n  {\n    [actionTypes.LIST_SUCCESS]: (\n      state: CommentState,\n      {\n        payload: { listData, nextToken },\n      }: { payload: CommentState; type: string }\n    ) => ({\n      ...state,\n      listData,\n    }),\n    [actionTypes.SET_CACHE_SUCCESS]: (\n      state: CommentState,\n      {\n        payload: { cacheData },\n      }: { payload: CommentState; type: string }\n    ) => ({\n      ...state,\n      cacheData,\n    }),\n    [actionTypes.CREATE_SUCCESS]: (\n      state: CommentState,\n      { payload: { listData } }: { payload: CommentState; type: string }\n    ) => ({\n      ...state,\n      listData: [...state.listData, ...listData],\n    }),\n    [actionTypes.TOGGLE_LOAD_NEW]: (\n      state: CommentState,\n      { payload }: { payload: boolean; type: string }\n    ) => ({\n      ...state,\n      toNew: payload,\n    }),\n    [actionTypes.TOGGLE_HAS_NEW]: (\n      state: CommentState,\n      { payload }: { payload: boolean; type: string }\n    ) => ({\n      ...state,\n      hasNew: payload,\n    }),\n  },\n  initialState\n);\n","import produce from 'immer'\nimport { handleActions as raHandleActions } from 'redux-actions'\n\nexport default (actions: any, state: any) => raHandleActions(\n  Object.keys(actions).reduce((acc: any, key: string) => {\n    acc[key] = produce(actions[key])\n\n    return acc\n  }, {}),\n  state\n)\n","import { handleActions } from 'redux-actions';\nconst info = JSON.parse(sessionStorage.getItem('info') || '');\n\nexport interface UserState {\n  userId: string;\n  userName: string;\n  userImage: string;\n  isOfficialAccount: boolean;\n}\n\nconst initialState: UserState = {\n  userId: info.userId || '',\n  userName: info.userName || '',\n  userImage: info.userImage || '',\n  isOfficialAccount: info.isOfficialAccount,\n};\n\nexport default handleActions(\n  {\n  },\n  initialState\n);\n","import room from './Room/reducer';\nimport comment from './Comment/reducer';\nimport user from './User/reducer';\n\nexport default {\n  room,\n  comment,\n  user\n};\n","export default {\n  CREATE: 'CREATE_room',\n  CREATE_SUCCESS: 'CREATE_SUCCESS_room',\n  UPDATE: 'UPDATE_room',\n  UPDATE_SUCCESS: 'UPDATE_SUCCESS_room',\n  DELETE: 'DELETE_room',\n  DELETE_SUCCESS: 'DELETE_SUCCESS_room',\n  GET: 'GET_room',\n  GET_SUCCESS: 'GET_SUCCESS_room',\n  LIST: 'LIST_room',\n  LIST_SUCCESS: 'LIST_SUCCESS_room',\n  RESET: 'RESET'\n};\n","import { put, takeEvery, all, call, fork, select } from 'redux-saga/effects';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport actionTypes from './actionTypes';\nimport commentActionTypes from '../Comment/actionTypes';\nimport { createRoom } from '../../graphql/mutations';\nimport { getRoom } from '../../graphql/queries';\n\nfunction* createSaga() {\n  yield takeEvery(actionTypes.CREATE, function* _({ payload }: any) {\n    const { id }: any = payload;\n\n    try {\n      const res = yield call(\n        [API, 'graphql'],\n        graphqlOperation(createRoom, { input: { id, commentTotalCount: 0 } })\n      );\n\n      if (res.data.createRoom) {\n        yield put({\n          type: actionTypes.CREATE_SUCCESS,\n        });\n      }\n    } catch (error) {\n      console.log(error.errors[0].message);\n    }\n  });\n}\n\nfunction* getSaga() {\n  yield takeEvery(actionTypes.GET, function* _() {\n    const id = yield select((state) => state.room.id);\n\n    try {\n      const res = yield call(\n        [API, 'graphql'],\n        graphqlOperation(getRoom, { id })\n      );\n\n      if (res.data.getRoom) {\n        yield put({\n          type: actionTypes.GET_SUCCESS,\n        });\n\n        yield put({\n          type: commentActionTypes.LIST,\n        });\n      } else {\n        yield put({\n          type: actionTypes.CREATE,\n          payload: { id },\n        });\n      }\n    } catch (error) {\n      console.log(error.errors[0].message);\n    }\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([fork(createSaga), fork(getSaga)]);\n}\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createRoom = /* GraphQL */ `\n  mutation CreateRoom(\n    $input: CreateRoomInput!\n    $condition: ModelRoomConditionInput\n  ) {\n    createRoom(input: $input, condition: $condition) {\n      id\n      commentTotalCount\n      comments {\n        items {\n          id\n          roomID\n          content\n          userId\n          userName\n          userImage\n          isNgWord\n          createdAt\n          isOfficialAccount\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateRoom = /* GraphQL */ `\n  mutation UpdateRoom(\n    $input: UpdateRoomInput!\n    $condition: ModelRoomConditionInput\n  ) {\n    updateRoom(input: $input, condition: $condition) {\n      id\n      commentTotalCount\n      comments {\n        items {\n          id\n          roomID\n          content\n          userId\n          userName\n          userImage\n          isNgWord\n          createdAt\n          isOfficialAccount\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteRoom = /* GraphQL */ `\n  mutation DeleteRoom(\n    $input: DeleteRoomInput!\n    $condition: ModelRoomConditionInput\n  ) {\n    deleteRoom(input: $input, condition: $condition) {\n      id\n      commentTotalCount\n      comments {\n        items {\n          id\n          roomID\n          content\n          userId\n          userName\n          userImage\n          isNgWord\n          createdAt\n          isOfficialAccount\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const createComment = /* GraphQL */ `\n  mutation CreateComment(\n    $input: CreateCommentInput!\n    $condition: ModelCommentConditionInput\n  ) {\n    createComment(input: $input, condition: $condition) {\n      id\n      roomID\n      room {\n        id\n        commentTotalCount\n        comments {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      content\n      userId\n      userName\n      userImage\n      isNgWord\n      createdAt\n      isOfficialAccount\n      updatedAt\n    }\n  }\n`;\nexport const updateComment = /* GraphQL */ `\n  mutation UpdateComment(\n    $input: UpdateCommentInput!\n    $condition: ModelCommentConditionInput\n  ) {\n    updateComment(input: $input, condition: $condition) {\n      id\n      roomID\n      room {\n        id\n        commentTotalCount\n        comments {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      content\n      userId\n      userName\n      userImage\n      isNgWord\n      createdAt\n      isOfficialAccount\n      updatedAt\n    }\n  }\n`;\nexport const deleteComment = /* GraphQL */ `\n  mutation DeleteComment(\n    $input: DeleteCommentInput!\n    $condition: ModelCommentConditionInput\n  ) {\n    deleteComment(input: $input, condition: $condition) {\n      id\n      roomID\n      room {\n        id\n        commentTotalCount\n        comments {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      content\n      userId\n      userName\n      userImage\n      isNgWord\n      createdAt\n      isOfficialAccount\n      updatedAt\n    }\n  }\n`;\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getRoom = /* GraphQL */ `\n  query GetRoom($id: ID!) {\n    getRoom(id: $id) {\n      id\n      commentTotalCount\n      comments {\n        items {\n          id\n          roomID\n          content\n          userId\n          userName\n          userImage\n          isNgWord\n          createdAt\n          isOfficialAccount\n          updatedAt\n        }\n        nextToken\n      }\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listRooms = /* GraphQL */ `\n  query ListRooms(\n    $filter: ModelRoomFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listRooms(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        commentTotalCount\n        comments {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getComment = /* GraphQL */ `\n  query GetComment($id: ID!) {\n    getComment(id: $id) {\n      id\n      roomID\n      room {\n        id\n        commentTotalCount\n        comments {\n          nextToken\n        }\n        createdAt\n        updatedAt\n      }\n      content\n      userId\n      userName\n      userImage\n      isNgWord\n      createdAt\n      isOfficialAccount\n      updatedAt\n    }\n  }\n`;\nexport const listComments = /* GraphQL */ `\n  query ListComments(\n    $filter: ModelCommentFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listComments(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        roomID\n        room {\n          id\n          commentTotalCount\n          createdAt\n          updatedAt\n        }\n        content\n        userId\n        userName\n        userImage\n        isNgWord\n        createdAt\n        isOfficialAccount\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\nexport const getCommentsByRoom = /* GraphQL */ `\n  query GetCommentsByRoom(\n    $roomID: ID\n    $createdAt: ModelStringKeyConditionInput\n    $sortDirection: ModelSortDirection\n    $filter: ModelCommentFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    getCommentsByRoom(\n      roomID: $roomID\n      createdAt: $createdAt\n      sortDirection: $sortDirection\n      filter: $filter\n      limit: $limit\n      nextToken: $nextToken\n    ) {\n      items {\n        id\n        roomID\n        room {\n          id\n          commentTotalCount\n          createdAt\n          updatedAt\n        }\n        content\n        userId\n        userName\n        userImage\n        isNgWord\n        createdAt\n        isOfficialAccount\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","export const REQUESTED_TIME_INTERVAL: number = 3000;\nexport const COMMENT_LIMIT = 10;\n","const NG_WORDS = [\n  \".COM\",\n  \"@\",\n  \"18禁\",\n  \"AV女優\",\n  \"AV嬢\",\n  \"BITCH\",\n  \"CHINK\",\n  \"CO.JP\",\n  \"CUNT\",\n  \"DAMN\",\n  \"DICK\",\n  \"FUCK\",\n  \"HTTP\",\n  \"LINE\",\n  \"NAKAD\",\n  \"NE.JP\",\n  \"NIGGA\",\n  \"NIGGER\",\n  \"SE✕\",\n  \"SEX\",\n  \"SHIT\",\n  \"SUCK\",\n  \"．ＣＯＭ\",\n  \"＠\",\n  \"１８禁\",\n  \"ＡＶ女優\",\n  \"ＡＶ嬢\",\n  \"ＢＩＴＣＨ\",\n  \"ＣＨＩＮＫ\",\n  \"ＣＯ．ＪＰ\",\n  \"ＣＵＮＴ\",\n  \"ＤＡＭＮ\",\n  \"ＤＩＣＫ\",\n  \"ＦＵＣＫ\",\n  \"ＨＴＴＰ\",\n  \"ＬＩＮＥ\",\n  \"ＮＡＫＡＤ\",\n  \"ＮＥ．ＪＰ\",\n  \"ＮＩＧＧＡ\",\n  \"ＮＩＧＧＥＲ\",\n  \"ＳＥ✕\",\n  \"ＳＥＸ\",\n  \"ＳＨＩＴ\",\n  \"ＳＵＣＫ\",\n  \"あおかん\",\n  \"あて馬\",\n  \"あめ公\",\n  \"いかさま\",\n  \"いざり\",\n  \"いた公\",\n  \"いんこう\",\n  \"いんちき\",\n  \"いんらん\",\n  \"うんこ\",\n  \"うんち\",\n  \"えっちしたい\",\n  \"おっぱい\",\n  \"おなにー\",\n  \"おわい屋\",\n  \"おんぼう\",\n  \"外人\",\n  \"かくせいざい\",\n  \"かさっかき\",\n  \"かたわ\",\n  \"がちゃ目\",\n  \"かつぎ屋\",\n  \"がまん汁\",\n  \"かわかぶり\",\n  \"きちがい\",\n  \"きょこん\",\n  \"きんたま\",\n  \"ぐらまらす\",\n  \"くりとりす\",\n  \"くろんぼ\",\n  \"ごうかん\",\n  \"こうもん\",\n  \"こかいん\",\n  \"こじき\",\n  \"ごみ屋\",\n  \"ころす\",\n  \"こんどーむ\",\n  \"ざーめん\",\n  \"しこしこ\",\n  \"しこって\",\n  \"しょじょ\",\n  \"しらっこ\",\n  \"すけこまし\",\n  \"すとーかー\",\n  \"ずりせん\",\n  \"せっくす\",\n  \"せふれ\",\n  \"せむし\",\n  \"せんずり\",\n  \"そーぷらんど\",\n  \"たんぽん\",\n  \"ちぇりーぼーい\",\n  \"ちくび\",\n  \"ちっぱい\",\n  \"中出し\",\n  \"ちん毛\",\n  \"ちんげ\",\n  \"ちんこ\",\n  \"ちんちん\",\n  \"ちんば\",\n  \"ちんぽ\",\n  \"つんぼ\",\n  \"どもり\",\n  \"とるこ嬢\",\n  \"とるこ風呂\",\n  \"なおん\",\n  \"なかだし\",\n  \"にがー\",\n  \"にぐろ\",\n  \"にこよん\",\n  \"ねこばば\",\n  \"のうまくえん\",\n  \"ばかちょん\",\n  \"ばた屋\",\n  \"ばばあ\",\n  \"ぱんちら\",\n  \"ぱんてぃ\",\n  \"びっこ\",\n  \"ふぇらちお\",\n  \"ぶさいく\",\n  \"ぶっ殺す\",\n  \"ぺちゃぱい\",\n  \"ぺにす\",\n  \"ぼいん\",\n  \"ぽこぺん\",\n  \"ぼっき\",\n  \"まえつき\",\n  \"まりふぁな\",\n  \"まんかす\",\n  \"まん毛\",\n  \"まんげ\",\n  \"みつくち\",\n  \"めくら\",\n  \"やー公\",\n  \"やー様\",\n  \"やくざ\",\n  \"やりちん\",\n  \"やりまん\",\n  \"らい病\",\n  \"れいぷ\",\n  \"ろすけ\",\n  \"ろんぱり\",\n  \"愛人\",\n  \"移民\",\n  \"淫行\",\n  \"淫売\",\n  \"淫乱\",\n  \"陰核\",\n  \"女性器\",\n  \"男性器\",\n  \"低脳\",\n  \"運ちゃん\",\n  \"沖仲仕\",\n  \"下女\",\n  \"下男\",\n  \"覚せい剤\",\n  \"覚醒剤\",\n  \"姦\",\n  \"姦通\",\n  \"顔射\",\n  \"汲み取り屋\",\n  \"給仕\",\n  \"巨根\",\n  \"巨乳\",\n  \"漁夫\",\n  \"強姦\",\n  \"業病\",\n  \"金たま\",\n  \"金玉\",\n  \"栗とりす\",\n  \"後進国\",\n  \"坑夫\",\n  \"工夫\",\n  \"紅毛人\",\n  \"鉱夫\",\n  \"殺\",\n  \"殺す\",\n  \"殺る\",\n  \"殺害\",\n  \"雑役夫\",\n  \"三韓征伐\",\n  \"三助\",\n  \"指ふぇら\",\n  \"支那人\",\n  \"死\",\n  \"死ね\",\n  \"死んで\",\n  \"自慰\",\n  \"自閉症\",\n  \"処女\",\n  \"女給\",\n  \"女工\",\n  \"女中\",\n  \"床屋\",\n  \"植物人間\",\n  \"職工\",\n  \"心身障害\",\n  \"人足\",\n  \"人夫\",\n  \"性欲\",\n  \"整形\",\n  \"生理\",\n  \"精液\",\n  \"精子\",\n  \"精神薄弱\",\n  \"絶倫\",\n  \"潜水夫\",\n  \"鮮人\",\n  \"大麻\",\n  \"谷間\",\n  \"痴漢\",\n  \"中共\",\n  \"丁稚\",\n  \"朝鮮征伐\",\n  \"屠殺\",\n  \"賭博\",\n  \"土工\",\n  \"土左衛門\",\n  \"土人\",\n  \"盗撮\",\n  \"童貞\",\n  \"特殊学級\",\n  \"南鮮\",\n  \"日雇い\",\n  \"乳首\",\n  \"馬喰\",\n  \"馬鹿でもちょんでも\",\n  \"馬丁\",\n  \"爆乳\",\n  \"半島人\",\n  \"百姓\",\n  \"表日本\",\n  \"貧乳\",\n  \"不細工\",\n  \"不倫\",\n  \"部落\",\n  \"風俗\",\n  \"糞\",\n  \"片手落ち\",\n  \"包茎\",\n  \"坊主\",\n  \"暴力団\",\n  \"北鮮\",\n  \"勃起\",\n  \"麻薬\",\n  \"毛唐\",\n  \"裏日本\",\n  \"恋愛解禁\",\n  \"連絡先\",\n  \"老婆\",\n  \"肛門\",\n  \"膣\",\n  \"舐め\",\n];\n\nexport default (content: string) => {\n  const isNgWord = (item: string) => {\n    const reg = new RegExp(item, \"i\");\n\n    return reg.test(content);\n  };\n\n  return NG_WORDS.some(isNgWord);\n};\n","import { eventChannel, END } from 'redux-saga';\nimport {\n  put,\n  takeEvery,\n  all,\n  call,\n  fork,\n  select,\n  debounce,\n} from 'redux-saga/effects';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport actionTypes from './actionTypes';\nimport { createComment } from '../../graphql/mutations';\nimport { getCommentsByRoom } from '../../graphql/queries';\nimport { CreateCommentInput } from '../../API';\nimport { COMMENT_LIMIT } from '../../constants';\nimport isNgWord from '../../utils/isNgWord';\n\nconst setIntervalWithConditionHelper = (index: number, time: number) =>\n  eventChannel((emitter) => {\n    index -= 1;\n    const iv = setInterval(() => {\n      if (index >= 0) {\n        emitter(index);\n      } else {\n        emitter(END);\n      }\n    }, time);\n    // The subscriber must return an unsubscribe function\n    return () => {\n      clearInterval(iv);\n    };\n  });\n\nfunction* createSaga() {\n  yield takeEvery(actionTypes.CREATE, function* _({\n    payload,\n  }: {\n    type: string;\n    payload: { content: string };\n  }) {\n    const { content } = payload;\n    const roomID: string = yield select((state) => state.room.id);\n    const { userName, userId, userImage, isOfficialAccount } = yield select(\n      (state) => state.user\n    );\n    const data: CreateCommentInput = {\n      content,\n      userName,\n      userId,\n      userImage,\n      isOfficialAccount,\n      roomID,\n      isNgWord: isNgWord(content),\n    };\n\n    try {\n      const res = yield call(\n        [API, 'graphql'],\n        graphqlOperation(createComment, { input: data })\n      );\n\n      if (res.data.createComment) {\n        yield put({\n          type: actionTypes.CREATE_SUCCESS,\n          payload: {\n            listData: [res.data.createComment],\n          },\n        });\n      }\n    } catch (error) {\n      console.log(error.errors[0].message);\n    }\n  });\n}\n\nfunction* listSaga() {\n  yield takeEvery(actionTypes.LIST, function* _() {\n    const roomID: string = yield select((state) => state.room.id);\n    const { userId } = yield select((state) => state.user);\n\n    try {\n      const res: any = yield call(\n        [API, 'graphql'],\n        graphqlOperation(getCommentsByRoom, {\n          limit: COMMENT_LIMIT,\n          roomID,\n          sortDirection: 'DESC',\n          filter: {\n            or: [\n              {\n                isNgWord: {\n                  eq: false,\n                },\n              },\n              {\n                isNgWord: {\n                  eq: true,\n                },\n                userId: {\n                  eq: userId,\n                },\n              },\n            ],\n          },\n        })\n      );\n      const data = res.data.getCommentsByRoom.items;\n\n      yield put({\n        type: actionTypes.SET_CACHE_SUCCESS,\n        payload: {\n          cacheData: data,\n        },\n      });\n    } catch (error) {\n      console.log(error);\n      console.log(error.errors[0].message);\n    }\n  });\n}\n\nfunction* updateRenderListSaga() {\n  yield debounce(220, actionTypes.UPDATE_RENDER, function* _() {\n    const { listData, cacheData } = yield select((state) => state.comment);\n\n    yield put({\n      type: actionTypes.LIST_SUCCESS,\n      payload: {\n        listData: [...listData, cacheData[cacheData.length - 1]],\n      },\n    });\n  });\n}\n\nfunction* updateCacheListSaga() {\n  yield debounce(220, actionTypes.UPDATE_CACHE, function* _() {\n    const { cacheData } = yield select((state) => state.comment);\n\n    yield put({\n      type: actionTypes.SET_CACHE_SUCCESS,\n      payload: {\n        cacheData: cacheData.slice(0, cacheData.length - 1),\n      },\n    });\n  });\n}\n\nexport default function* rootSaga() {\n  yield all([\n    fork(createSaga),\n    fork(listSaga),\n    fork(updateRenderListSaga),\n    fork(updateCacheListSaga),\n  ]);\n}\n","import { all } from 'redux-saga/effects';\nimport roomSaga from './Room/saga';\nimport commentSaga from './Comment/saga';\n\nexport default function* rootSaga() {\n  yield all([\n    roomSaga(),\n    commentSaga(),\n  ]);\n}\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport reducers from './reducers';\nimport rootSaga from './rootSaga';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    store: {};\n  }\n}\n\nconst windowIfDefined = typeof window === 'undefined' ? null : window;\nconst composeEnhancers =\n  (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares: any = [sagaMiddleware];\n\nif (process.env.NODE_ENV !== 'production') {\n  middlewares.push(logger);\n}\n\nconst store = createStore(\n  combineReducers({\n    ...reducers,\n  }),\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n\nsagaMiddleware.run(rootSaga);\n\nwindow.store = store;\n\nexport { store };\n\n\n","import { createAction } from 'redux-actions';\nimport actionTypes from './actionTypes';\n\nexport const createRoomAction = createAction(actionTypes.CREATE);\n\nexport const getRoomAction = createAction(actionTypes.GET);\n\n\n\n","import { createAction } from 'redux-actions';\nimport actionTypes from './actionTypes';\n\nexport const listCommentsAction = createAction(actionTypes.LIST);\n\nexport const createCommentAction = createAction(actionTypes.CREATE);\n\nexport const createCommentSuccessAction = createAction(actionTypes.CREATE_SUCCESS);\n\nexport const toggleHasNewAction = createAction(actionTypes.TOGGLE_HAS_NEW);\n\nexport const toggleLoadNewAction = createAction(actionTypes.TOGGLE_LOAD_NEW);\n\nexport const updateCommentsAction = createAction(actionTypes.UPDATE_RENDER);\n\nexport const updateCacheCommentsAction = createAction(actionTypes.UPDATE_CACHE);\n\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { TopProps } from '../../containers/Top';\n\nexport default ({ commentTotalCount }: TopProps) => {\n  return (\n    <CommentCount>\n      <img src=\"\" alt=\"comment\" />\n      コメント数： {commentTotalCount}\n    </CommentCount>\n  );\n};\n\nconst CommentCount = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 8px 16px;\n  background: #f5f5f5 left center no-repeat;\n  background-size: 10px auto;\n  color: #888888;\n  font-size: 12px;\n  letter-spacing: 0.75px;\n\n  img {\n    width: 10px;\n    margin-top: 1px;\n    margin-right: 4px;\n    opacity: 0.5;\n  }\n\n  @media (max-width: 768px) {\n    display: none;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const CommentList = styled.div`\n  position: relative;\n  width: 100%;\n  height: calc(40vw - 102px);\n  ul {\n    width: 100%;\n    height: 100%;\n    list-style: none;\n    overflow: auto;\n  }\n\n  li {\n    display: flex;\n    width: 100%;\n    padding: 8px 16px;\n  }\n\n  .image {\n    flex-shrink: 0;\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    background-color: #bdbdbd;\n    background-size: cover;\n    background-position: center center;\n    background-repeat: no-repeat;\n    &.is-default {\n      background-size: 80% auto;\n    }\n  }\n\n  .text {\n    width: 100%;\n    padding-left: 8px;\n    font-size: 12px;\n  }\n\n  .user-name {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    color: #888;\n    font-weight: 500;\n    font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n    img {\n      margin-left: 5px;\n    }\n  }\n\n  .button {\n    position: absolute;\n    left: 50%;\n    bottom: 20px;\n    width: 120px;\n    height: 24px;\n    margin-left: -70px;\n    font-size: 12px;\n    color: #fff;\n    background-color: rgba(0, 0, 0, 0.8);\n    border-radius: 4px;\n    transition: bottom 0.2s ease-in;\n    &:hover {\n      opacity: 1;\n    }\n\n    &.hidden {\n      bottom: -32px;\n    }\n  }\n\n  @media (max-width: 768px) {\n    height: calc(100vh - 57vw);\n    ul {\n      padding-top: 48px;\n      padding-bottom: 64px;\n    }\n\n    .button {\n      bottom: 80px;\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { CommentList } from './style';\nimport { TopProps } from '../../containers/Top';\nimport { CreateCommentInput } from '../../API';\nimport { Button } from 'antd';\n\nexport default ({\n  listComments,\n  comments,\n  toNew,\n  hasNew,\n  toggleLoadNew,\n  toggleHasNew,\n}: TopProps) => {\n  useEffect(() => {\n    const list = document.getElementById('commentList');\n\n    if (list && toNew && toggleHasNew) {\n      list.scrollTop = list.scrollHeight;\n      toggleHasNew(false);\n    }\n  }, [comments, toNew]);\n\n  const handleScroll = () => {\n    const list = document.getElementById('commentList');\n\n    if (list && toggleLoadNew) {\n      if (list.scrollTop < list.scrollHeight - list.offsetHeight) {\n        if (toNew) {\n          toggleLoadNew(false);\n        }\n      } else {\n        toggleLoadNew(true);\n      }\n    }\n  };\n\n  const handleButtonClick = () => {\n    const list = document.getElementById('commentList');\n\n    if (list && toggleLoadNew && toggleHasNew) {\n      toggleLoadNew(true);\n      toggleHasNew(false);\n\n      setTimeout(() => {\n        list.scrollTop = list.scrollHeight;\n      }, 500);\n    }\n  };\n\n  return (\n    <CommentList>\n      <ul onScroll={handleScroll} id=\"commentList\">\n        {comments &&\n          comments.map((item: CreateCommentInput) => {\n            if (item.id) {\n              return (\n                <li key={item.id}>\n                  <div\n                    className={`image ${item.userImage ? '' : 'is-default'}`}\n                    style={{\n                      backgroundImage: `url('${item.userImage}')`,\n                    }}\n                  />\n                  <div className=\"text\">\n                    <div className=\"user-name\">\n                      {item.userName}{' '}\n                      {item.isOfficialAccount && (\n                        <img src=\"\" alt=\"offical-account\" />\n                      )}\n                    </div>\n                    <div className=\"content\">{item.content}</div>\n                  </div>\n                </li>\n              );\n            } else {\n              return null;\n            }\n          })}\n      </ul>\n      <Button\n        className={`button ${hasNew && !toNew ? '' : 'hidden'}`}\n        onClick={handleButtonClick}\n      >\n        最新コメントへ\n      </Button>\n    </CommentList>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CommentForm = styled.div`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 64px;\n  padding: 12px 16px;\n  background-color: #fff;\n\n  .ant-form {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n  }\n\n  .ant-row {\n    width: 100%;\n  }\n\n  .ant-form-item-control-input-content {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 40px;\n    padding: 0 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    border-right-width: 0;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    overflow: hidden;\n  }\n\n  input {\n    width: 100%;\n    border: none;\n    font-size: 12px;\n    padding: 12px 0;\n    line-height: 1;\n  }\n\n  button {\n    flex-shrink: 0;\n    width: 50px;\n    height: 40px;\n    background-color: #e5012c;\n    color: #fff;\n    font-size: 12px;\n    border-radius: 4px;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n\n  .ant-form-item-explain {\n    display: none;\n  }\n\n  @media (max-width: 768px) {\n    input {\n      font-size: 16px;\n    }\n\n    button {\n      width: 80px;\n      font-size: 16px;\n    }\n  }\n`;\n","import React from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { CommentForm } from './style';\nimport { TopProps } from '../../containers/Top';\n\nexport default ({ createComment, toggleLoadNew }: TopProps) => {\n  const [form] = Form.useForm();\n\n  const onFinish = (values: any) => {\n    if (createComment) {\n      createComment(values);\n\n      form.resetFields();\n\n      if (toggleLoadNew) {\n        toggleLoadNew(true);\n      }\n    }\n  };\n\n  return (\n    <CommentForm>\n      <Form\n        name=\"form\"\n        form={form}\n        initialValues={{\n          content: '',\n        }}\n        onFinish={onFinish}\n      >\n        <Form.Item name=\"content\" rules={[{ required: true }, { max: 100 }]}>\n          <Input placeholder=\"コメント入力してください\" />\n        </Form.Item>\n\n        <Button htmlType=\"submit\">送る</Button>\n      </Form>\n    </CommentForm>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nexport default () => {\n  return (\n    <Introduction>\n      <div className=\"text\">\n        皆さんにお知らせです\n        <br />\n        3月10日東京ドームでファンクラブ限定ライブを開催します、よろしくお願いします\n        Instagram → https://t.co/g7GmkjouCbL 連絡先 → sony@sony.com\n        https://t.co/2oWjPdj4lud\n      </div>\n    </Introduction>\n  );\n};\n\nconst Introduction = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n\n  background-color: #f5f5f5;\n  .text {\n    max-width: 560px;\n    margin: 0 auto; \n    padding: 16px;\n    color: #555555;\n    font-size: 12px;\n    text-align: center;\n    letter-spacing: 0.75px;\n  }\n\n  @media(max-height: 768px) {\n    height: calc(100vh - 57vw);\n    padding-top: 48px;\n  }\n`;\n","import styled from 'styled-components';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\n\nexport const PageContainer = styled.div`\n  width: 100%;\n  header {\n    width: 100%;\n    height: 96px;\n    background-color: #171616;\n    color: #fff;\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n      0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  }\n\n  .main {\n    width: 100%;\n    max-width: 1640px;\n    margin: 0 auto;\n    padding: 48px 32px;\n    overflow: hidden;\n  }\n\n  .section-container {\n    width: 100%;\n    .title {\n      width: 100%;\n      padding: 0 0 24px;\n      font-size: 24px;\n      font-family: NotoSansCJKjp-Bold, NotoSansCJKjp;\n      font-weight: bold;\n      letter-spacing: 1px;\n    }\n    .wrapper {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    }\n    + .section-container {\n      padding-top: 40px;\n    }\n  }\n\n  .video {\n    background-color: #171616;\n  }\n\n  .comment {\n    position: relative;\n  }\n\n  @media (min-width: 769px) {\n    .comment-video-container {\n      .wrapper {\n        flex-direction: row;\n        height: 40vw;\n        max-height: 660px;\n      }\n    }\n\n    .video {\n      width: 75%;\n      height: 100%;\n    }\n\n    .comment {\n      width: 25%;\n      min-width: 240px;\n      margin-left: 8px;\n      border: 1px solid rgba(0, 0, 0, 0.12);\n      border-radius: 4px;\n      flex-grow: 1;\n      flex-shrink: 0;\n      overflow: hidden;\n    }\n  }\n\n  @media (max-width: 768px) {\n    .hidden-sp {\n      display: none;\n    }\n\n    .main {\n      padding: 0;\n    }\n\n    .comment-video-container {\n      .wrapper {\n        flex-direction: column;\n      }\n    }\n\n    .video {\n      width: 100vw;\n      height: 57vw;\n    }\n\n    .comment {\n      width: 100%;\n    }\n  }\n`;\n\nexport const TabContainer = styled(Tabs)`\n  position: relative;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const TabTitle = styled(TabList)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  background-color: #fff;\n  z-index: 9;\n\n  @media (min-width: 769px) {\n    &.hidden-pc {\n      display: none;\n    }\n  }\n`;\n\nexport const TabTitleItem = styled(Tab)`\n  position: relative;\n  width: 30%;\n  max-width: 200px;\n  height: 48px;\n  font-size: 12px;\n  text-align: center;\n  line-height: 48px;\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n\n  &.react-tabs__tab--selected {\n    color: #e5012c;\n    &::after {\n      content: '';\n      position: absolute;\n      bottom: 0;\n      left: 50%;\n      width: 100px;\n      height: 2px;\n      margin-left: -50px;\n      background-color: #e5012c;\n    }\n  }\n`;\n\nexport const TabContent = styled(TabPanel)`\n  height: 100%;\n\n  @media (min-width: 769px) {\n    &.hidden-pc {\n      display: none;\n    }\n  }\n\n  /* @media (max-width: 768px) {\n    padding-top: 48px;\n  } */\n`;\n","import React from 'react';\nimport CommentCount from '../../components/CommentCount';\nimport CommentList from '../../components/CommentList';\nimport CommentSubmit from '../../components/CommentSubmit';\nimport Introduction from '../../components/Introduction';\nimport {\n  PageContainer,\n  TabContainer,\n  TabTitle,\n  TabTitleItem,\n  TabContent,\n} from './style';\nimport { TopProps } from '../../containers/Top';\n\nexport default ({\n  comments,\n  toNew,\n  hasNew,\n  listComments,\n  createComment,\n  commentTotalCount,\n  toggleLoadNew,\n  toggleHasNew,\n}: TopProps) => {\n  return (\n    <PageContainer>\n      <header className=\"hidden-sp\"></header>\n      <div className=\"main\">\n        <section className=\"section-container comment-video-container\">\n          <div className=\"title hidden-sp\">King Gnu - どろん</div>\n          <div className=\"wrapper\">\n            <div className=\"video\"></div>\n\n            <div className=\"comment\">\n              <TabContainer>\n                <TabTitle className=\"hidden-pc\">\n                  <TabTitleItem>コメント({commentTotalCount})</TabTitleItem>\n                  <TabTitleItem>紹介</TabTitleItem>\n                </TabTitle>\n\n                <TabContent>\n                  <CommentCount commentTotalCount={commentTotalCount} />\n                  <CommentList\n                    comments={comments}\n                    toNew={toNew}\n                    hasNew={hasNew}\n                    listComments={listComments}\n                    toggleLoadNew={toggleLoadNew}\n                    toggleHasNew={toggleHasNew}\n                  />\n                  <CommentSubmit\n                    createComment={createComment}\n                    toggleLoadNew={toggleLoadNew}\n                  />\n                </TabContent>\n                <TabContent className=\"hidden-pc\">\n                  <Introduction />\n                </TabContent>\n              </TabContainer>\n            </div>\n          </div>\n        </section>\n        <section className=\"section-container hidden-sp\">\n          <div className=\"title\">紹介</div>\n          <div className=\"wrapper\">\n            <Introduction />\n          </div>\n        </section>\n      </div>\n    </PageContainer>\n  );\n};\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getRoomAction } from '../../redux/Room/actions';\nimport {\n  listCommentsAction,\n  createCommentAction,\n  toggleLoadNewAction,\n  toggleHasNewAction,\n  updateCommentsAction,\n  updateCacheCommentsAction,\n} from '../../redux/Comment/actions';\nimport Top from '../../components/Top';\nimport { Store } from '../../redux/types';\nimport { Action } from 'redux';\nimport { CreateCommentInput } from '../../API';\nimport * as subscriptions from '../../graphql/subscriptions';\nimport { REQUESTED_TIME_INTERVAL } from '../../constants';\n\nexport interface TopProps {\n  comments?: CreateCommentInput[];\n  cacheComments?: CreateCommentInput[];\n  toNew?: boolean;\n  hasNew?: boolean;\n  commentTotalCount?: number;\n  listComments?: () => Action<any>;\n  createComment?: (values: any) => Action<any>;\n  toggleLoadNew?: (toNew: boolean) => Action<any>;\n  toggleHasNew?: (hasNew: boolean) => Action<any>;\n}\n\nexport default () => {\n  const dispatch = useDispatch();\n  const commentTotalCount = useSelector(\n    (store: Store) => store.room.commentTotalCount\n  );\n  const comments = useSelector((store: Store) => store.comment.listData);\n  const cacheComments = useSelector((store: Store) => store.comment.cacheData);\n  const toNew = useSelector((store: Store) => store.comment.toNew);\n  const hasNew = useSelector((store: Store) => store.comment.hasNew);\n  const getRoom = useCallback(() => dispatch(getRoomAction()), [dispatch]);\n  const listComments = useCallback(() => dispatch(listCommentsAction()), [\n    dispatch,\n  ]);\n  const createComment = useCallback(\n    (values) => dispatch(createCommentAction(values)),\n    [dispatch]\n  );\n  const toggleLoadNew = useCallback(\n    (toNew) => dispatch(toggleLoadNewAction(toNew)),\n    [dispatch]\n  );\n  const toggleHasNew = useCallback(\n    (hasNew) => dispatch(toggleHasNewAction(hasNew)),\n    [dispatch]\n  );\n  const updateComments = useCallback(() => dispatch(updateCommentsAction()), [\n    dispatch,\n  ]);\n  const updateCacheComments = useCallback(\n    () => dispatch(updateCacheCommentsAction()),\n    [dispatch]\n  );\n\n  useEffect(() => {\n    getRoom();\n\n    setInterval(() => {\n      listComments();\n    }, REQUESTED_TIME_INTERVAL);\n\n    // // Subscribe to creation\n    // const api: any = API.graphql(\n    //   graphqlOperation(subscriptions.onCreateComment)\n    // );\n    // const subscription = api.subscribe({\n    //   next: (listData: any) => {\n    //     const values = listData.value.data.onCreateComment;\n    //     setComment({ listData: [values] });\n    //   },\n    // });\n  }, [getRoom, listComments]);\n\n  useEffect(() => {\n    if (comments && cacheComments && cacheComments.length > 0) {\n      let notDuplicate = true;\n\n      comments.map((item: CreateCommentInput) => {\n        if (item.id === cacheComments[cacheComments.length - 1].id) {\n          notDuplicate = false;\n        }\n\n        return notDuplicate;\n      });\n\n      if (notDuplicate && toNew) {\n        updateComments();\n      }\n\n      updateCacheComments();\n\n      if (notDuplicate && !toNew) {\n        toggleHasNew(notDuplicate);\n      }\n    }\n  }, [cacheComments]);\n\n  return (\n    <Top\n      comments={comments}\n      toNew={toNew}\n      hasNew={hasNew}\n      commentTotalCount={commentTotalCount}\n      cacheComments={cacheComments}\n      listComments={listComments}\n      createComment={createComment}\n      toggleLoadNew={toggleLoadNew}\n      toggleHasNew={toggleHasNew}\n    />\n  );\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Amplify from 'aws-amplify';\nimport awsconfig from '../../aws-exports';\nimport { store } from '../../redux/store';\nimport Top from '../Top';\n\nAmplify.configure(awsconfig);\n\nexport default () => {\n  return (\n    <Provider store={store} >\n      <Top />\n    </Provider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}