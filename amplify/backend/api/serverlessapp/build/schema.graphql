type Room {
  id: ID!
  commentTotalCount: Int
  comments(createdAt: ModelStringKeyConditionInput, filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Comment {
  id: ID!
  roomID: ID!
  room: Room
  content: String!
  userId: String!
  userName: String!
  userImage: String!
  isNgWord: Boolean!
  createdAt: String!
  isOfficialAccount: Boolean!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelRoomConnection {
  items: [Room]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelRoomFilterInput {
  id: ModelIDInput
  commentTotalCount: ModelIntInput
  and: [ModelRoomFilterInput]
  or: [ModelRoomFilterInput]
  not: ModelRoomFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getRoom(id: ID!): Room
  listRooms(filter: ModelRoomFilterInput, limit: Int, nextToken: String): ModelRoomConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getCommentsByRoom(roomID: ID, createdAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
}

input CreateRoomInput {
  id: ID
  commentTotalCount: Int
}

input UpdateRoomInput {
  id: ID!
  commentTotalCount: Int
}

input DeleteRoomInput {
  id: ID
}

type Mutation {
  createRoom(input: CreateRoomInput!, condition: ModelRoomConditionInput): Room
  updateRoom(input: UpdateRoomInput!, condition: ModelRoomConditionInput): Room
  deleteRoom(input: DeleteRoomInput!, condition: ModelRoomConditionInput): Room
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
}

input ModelRoomConditionInput {
  commentTotalCount: ModelIntInput
  and: [ModelRoomConditionInput]
  or: [ModelRoomConditionInput]
  not: ModelRoomConditionInput
}

type Subscription {
  onCreateRoom: Room @aws_subscribe(mutations: ["createRoom"])
  onUpdateRoom: Room @aws_subscribe(mutations: ["updateRoom"])
  onDeleteRoom: Room @aws_subscribe(mutations: ["deleteRoom"])
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"])
}

type ModelCommentConnection {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  roomID: ModelIDInput
  content: ModelStringInput
  userId: ModelStringInput
  userName: ModelStringInput
  userImage: ModelStringInput
  isNgWord: ModelBooleanInput
  createdAt: ModelStringInput
  isOfficialAccount: ModelBooleanInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  roomID: ID!
  content: String!
  userId: String!
  userName: String!
  userImage: String!
  isNgWord: Boolean!
  createdAt: String
  isOfficialAccount: Boolean!
}

input UpdateCommentInput {
  id: ID!
  roomID: ID
  content: String
  userId: String
  userName: String
  userImage: String
  isNgWord: Boolean
  createdAt: String
  isOfficialAccount: Boolean
}

input DeleteCommentInput {
  id: ID
}

input ModelCommentConditionInput {
  roomID: ModelIDInput
  content: ModelStringInput
  userId: ModelStringInput
  userName: ModelStringInput
  userImage: ModelStringInput
  isNgWord: ModelBooleanInput
  createdAt: ModelStringInput
  isOfficialAccount: ModelBooleanInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
